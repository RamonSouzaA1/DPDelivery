Strategy
- Criei uma interface Frete com os metodos obterDesconto() e obterCalculoFrete(int peso).
- Criei uma classe abstrata BaseCliente para poder abrigar os metodos e atributos em comum de clientes CPF e CNPJ.
- Então, o calculo do frete é realizado pelo tipo de cliente, na classe do pacote model.
- Ao gravar a encomenda, verifica se o cliente é CPF ou CNPJ, a partir disso ele instancia o cliente correto e 
faz o calculo para poder criar a encomenda com o valor obtido do metodo obterCalculoFrete do cliente correto.

Memento
- o memento vai salvar os status das encomendas. 
- Foi criado um campo no banco para encomenda com nome memento. Salva text. 
- Quando instanciado, já inicia com o estado inicial.
- A cada status ele vai salvar "-> " + getSituacao().
- A gente exibe os andamentos na pagina de consulta.

State
- Foi implementado na classe Veiculo.
- Foi criado um metodo na classe para receber uma string e decidir qual estado ela é
- Nesse caso, ela vai abrir o metodo correspondente ao seu estado e retornar se vai ser alterado ou nao
o estado do veiculo de acordo com o diagrama.

Chain of Responsability
- No exemplo do professor, temos uma interface TipoDocumento e 4 classes TipoDocumentoBoleto, etc; uma classe
Documento que tem um atributo do tipo TipoDocumento e um construtor que inicializa esse atributo;
Uma classe abstrata funcionario que tem um atributo tipo Funcionario e um array lista de documentos.
- No nosso caso teremos uma interface Funcao e 2 classes FuncaoEntregador e FuncaoMontador. Uma classe 
Tarefa que tem um atributo do tipo Funcao e um construtor que inicializa esse atributo.


Função ~ TipoDocumento
Tarefa ~ Documento
RolTarefa ~ RolDocumento
Funcionario = Funcionario


Falta fazer
Observer
Chain

- Obs: Memento falta desfazer
- Explicar o template method
- Obs: a mensagem do state está fixa. Caso termine, passar a mensagem que vem do return das classes de estado.
